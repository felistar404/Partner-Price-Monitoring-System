---
import DashboardLayout from "../../../layouts/dashboardLayout.astro";

// Fetch all platforms from API
const apiBaseUrl = import.meta.env.HK_PUBLIC_API_BASE || '/api';
let platforms = [];
let latestUpdate = null;

const region = "hk";

// import { getRelativeLocaleUrl } from 'astro:i18n';
import translations from '../../../i18n';

const { currentLocale } = Astro;

const t = (key, defaultValue = '') => {
  const keys = key.split('.');
  let value = translations[currentLocale] || {};
  
  for (const k of keys) {
    if (!value || !value[k]) return defaultValue || key;
    value = value[k];
  }
  
  return value || defaultValue || key;
};

try {
  const response = await fetch(`${apiBaseUrl}/get_platforms.php`);
  const data = await response.json();
  platforms = data.records || [];
  
  // Fetch the latest update date
  const latestDateResponse = await fetch(`${apiBaseUrl}/get_latest_date.php`);
  const latestDateData = await latestDateResponse.json();
  latestUpdate = latestDateData.latest_update;
} catch (error) {
  console.error("Error:", error);
}

// Calculate total pages and set max elements per page for table
const itemsPerPage = 10;
const totalPages = Math.ceil(platforms.length / itemsPerPage);

const paginationArray = [];
for (let i = 1; i <= totalPages; i++) {
  paginationArray.push(i);
}
---

<DashboardLayout 
  title="Platforms | QNAP Monitoring System"
  pageTitle={t('platforms.pageTitle', 'Modify Platforms')} 
  activePage="modify-platforms"
  region={region}
  breadcrumbs={[
    { label: "Home", href: `/${region}/` },
    { label: "Modify Items" },
    { label: "Platforms" }
  ]}
>
  <!-- Customization Stylesheet for platforms.astro <----- Not recommend to modify any of these code. -->
  <style>
    .input-group.input-group-outline.custom-search {
      --bs-primary: #747b8a;
      --bs-primary-rgb: 116, 123, 138;
    }
    
    .input-group.input-group-outline.custom-search.is-focused .form-label+.form-control {
      border-color: #747b8a !important;
      box-shadow: inset 1px 0 #747b8a, inset -1px 0 #747b8a, inset 0 -1px #747b8a;
    }
    
    .input-group.input-group-outline.custom-search.is-focused .form-label,
    .input-group.input-group-outline.custom-search.is-filled .form-label {
      color: #747b8a;
    }

    .input-group.input-group-outline.custom-search.is-focused .form-label+.form-control {
      border-color: #747b8a !important;
      border-top-color: transparent !important;
      box-shadow: inset 1px 0 #747b8a, inset -1px 0 #747b8a, inset 0 -1px #747b8a;
    }
    
    .input-group.input-group-outline.custom-search.is-focused .form-label:before,
    .input-group.input-group-outline.custom-search.is-focused .form-label:after,
    .input-group.input-group-outline.custom-search.is-filled .form-label:before,
    .input-group.input-group-outline.custom-search.is-filled .form-label:after {
      border-top-color: #747b8a;
      box-shadow: inset 0 1px #747b8a;
    }

    .bg-gradient-secondary {
      background-image: linear-gradient(195deg, #8196ac 0%, #747b8a 100%);
    }
    
    .btn-silver {
      background-color: #747b8a;
      color: #fff;
    }
    
    .btn-silver:hover {
      background-color: #868e96;
      color: #fff;
    }
    
    .modal-header.bg-gradient-secondary {
      color: white;
    }

    .search-container {
      position: relative;
      display: flex;
      justify-content: flex-end;
      padding: 0 1rem;
    }

    .search-container .input-group {
      width: auto;
      max-width: 200px;
    }
    
    .search-container i {
      position: absolute;
      top: 50%;
      right: 10px;
      transform: translateY(-50%);
      color: #aaa;
    }
    
    .form-control:focus + i {
      color: #344767;
    }
    
    .table-responsive {
      overflow-x: auto;
    }
    
    .action-btn {
      padding: 0.40rem 0.75rem;
      font-size: 0.75rem;
    }
    
    .badge.badge-sm {
      font-size: 0.65rem;
      padding: 0.35em 0.65em;
    }
    
    .pagination {
      margin-bottom: 0;
    }
    
    .pagination .page-link {
      color: #344767;
    }
    
    .pagination .page-item.active .page-link {
      background-color: #344767;
      border-color: #344767;
      color: white;
    }
    
    .pagination .page-item.disabled .page-link {
      color: #6c757d;
    }
    
    .modal-header {
      padding-bottom: 0.5rem;
    }
    
    .modal-footer {
      padding-top: 0.75rem;
    }
    
    .form-label {
      font-size: 0.875rem;
      margin-bottom: 0.3rem;
      font-weight: 500;
    }
    
    .spinner-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10;
    }

    @keyframes highlightRow {
      0% { background-color: rgba(66, 184, 131, 0.2); }
      100% { background-color: transparent; }
    }
    
    .row-updated {
      animation: highlightRow 2s ease-out;
    }
  </style>

  <!-- Main Content -->
  <div class="container-fluid py-2">
    <div class="row mb-4">
      <div class="col-12">
        <div class="card">
          <!-- Card Header with Title -->
          <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
            <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3">
              <h6 class="text-white text-capitalize ps-3 mb-0">{t('platforms.list', 'Platforms List')}</h6>
            </div>
            <div class="search-container p-3">
              <div class="input-group input-group-outline bg-white border-radius-md custom-search">
                <label class="form-label">{t('platforms.search', 'Search platform...')}</label>
                <input type="text" id="platform-search" class="form-control">
              </div>
            </div>
          </div>
          
          <!-- Card Body with Table -->
          <div class="card-body px-0 pb-2">
            <div class="table-responsive p-0">
              <table class="table align-items-center mb-0" id="platforms-table">
                <thead>
                  <tr>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">{t('platforms.platformId', 'ID')}</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">{t('platforms.platformName', 'Platform Name')}</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">{t('platforms.url', 'URL')}</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">{t('platforms.productUrl', 'Product URL')}</th>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">{t('platforms.merchantUrl', 'Merchant URL')}</th>
                    <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">{t('platforms.status', 'Status')}</th>
                    <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">{t('general.actions', 'Actions')}</th>
                  </tr>
                </thead>
                <tbody>
                  {platforms.length > 0 ? (
                    platforms.map((platform: any, index: number) => (
                      <tr class="table-row" data-page={Math.floor(index / itemsPerPage) + 1} data-platform={JSON.stringify(platform)}>
                        <td>
                          <div class="d-flex px-3 py-1">
                            <p class="text-xs font-weight-bold mb-0">{platform.platform_id}</p>
                          </div>
                        </td>
                        <td>
                          <p class="text-xs font-weight-bold mb-0">{platform.platform_name}</p>
                        </td>
                        <td>
                          <p class="text-xs font-weight-bold mb-0">{platform.platform_url}</p>
                        </td>
                        <td>
                          <p class="text-xs font-weight-bold mb-0">{platform.platform_url_price}</p>
                        </td>
                        <td>
                          <p class="text-xs font-weight-bold mb-0">{platform.platform_url_merchant}</p>
                        </td>
                        <td class="text-center">
                          <span class={`badge badge-sm ${platform.platform_status === 'active' ? 'bg-gradient-success' : 'bg-gradient-danger'}`}>
                            {platform.platform_status}
                          </span>
                        </td>
                        <td class="align-middle text-center">
                          <button 
                            class="btn btn-link mb-0 btn-sm btn-silver edit-btn" 
                            data-platform-id={platform.platform_id} 
                            title="Edit Platform">
                            <i class="material-symbols-rounded">edit</i>&nbsp;{t('general.edit', 'Edit')}
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colspan="7" class="text-center py-4">
                        <div class="alert alert-info mb-0">
                          <h4><i class="material-symbols-rounded">info</i>{t('platforms.noResultsFoundTitle', ' No platforms found')}</h4>
                          <p>{t('platforms.noResultsInDB', 'There are no platforms available in the database.')}</p>
                        </div>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
          
          <!-- Card Footer with Pagination -->
          <div class="card-footer d-flex justify-content-center">
            <nav aria-label="Page navigation">
              <ul class="pagination justify-content-center" id="pagination">
                <li class="page-item page-prev disabled">
                  <a class="page-link" href="#" tabindex="-1">
                    <i class="material-symbols-rounded">chevron_left</i>
                  </a>
                </li>
                {paginationArray.map(pageNum => (
                  <li class={`page-item page-number ${pageNum === 1 ? 'active' : ''}`} data-page={pageNum}>
                    <a class="page-link" href="#">{pageNum}</a>
                  </li>
                ))}
                <li class={`page-item page-next ${totalPages <= 1 ? 'disabled' : ''}`}>
                  <a class="page-link" href="#">
                    <i class="material-symbols-rounded">chevron_right</i>
                  </a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Edit Platform Modal -->
  <div class="modal fade" id="editPlatformModal" tabindex="-1" aria-labelledby="editPlatformModalLabel">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header bg-gradient-secondary">
          <h6 class="modal-title text-white" id="editPlatformModalLabel">{t('platforms.editPlatform', 'Edit Platform')}</h6>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editPlatformForm">
            <input type="hidden" id="platform_id" name="platform_id">
            
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="input-group input-group-static mb-3">
                  <label for="platform_name" class="ms-0">{t('platforms.platformName', 'Platform Name')}</label>
                  <input type="text" class="form-control" id="platform_name" name="platform_name" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="input-group input-group-static mb-3">
                  <label for="platform_status" class="ms-0">{t('platforms.status', 'Status')}</label>
                  <select class="form-control" id="platform_status" name="platform_status" required>
                    <option value="active">{t('platforms.active', 'Active')}</option>
                    <option value="inactive">{t('platforms.inactive', 'Inactive')}</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="input-group input-group-static mb-3">
              <label for="platform_url" class="ms-0">{t('platforms.url', 'Platform URL')}</label>
              <input type="text" class="form-control" id="platform_url" name="platform_url" required>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="input-group input-group-static mb-3">
                  <label for="platform_url_price" class="ms-0">{t('platforms.productUrl', 'Product URL')}</label>
                  <input type="text" class="form-control" id="platform_url_price" name="platform_url_price" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="input-group input-group-static mb-3">
                  <label for="platform_url_merchant" class="ms-0">{t('platforms.merchantUrl', 'Merchant URL')}</label>
                  <input type="text" class="form-control" id="platform_url_merchant" name="platform_url_merchant" required>
                </div>
              </div>
            </div>
            
            <div class="row text-sm text-muted">
              <div class="col-md-6">
                <p class="mb-0">{t('platforms.createdAt', 'Created: ')}<span id="created_at"></span></p>
              </div>
              <div class="col-md-6">
                <p class="mb-0">{t('platforms.updatedAt', 'Last Updated: ')}<span id="updated_at"></span></p>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">{t('general.cancel', 'Cancel')}</button>
          <button type="button" class="btn btn-silver" id="savePlatformBtn">{t('general.save', 'Save Changes')}</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Success/Error Alert Modal -->
  <div class="modal fade" id="alertModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="alertTitle">{t('general.success', 'Success')}</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="alertMessage">{t('platforms.updateSuccess', 'Platform updated successfully!')}</div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn bg-gradient-secondary" data-bs-dismiss="modal">{t('general.ok', 'OK')}</button>
        </div>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ totalPages, itemsPerPage, apiBaseUrl }}>
    document.addEventListener('DOMContentLoaded', function() {
      let currentPage = 1;
      if (document.querySelectorAll('.input-group.input-group-outline').length > 0) {
        const materialInputs = document.querySelectorAll('.input-group.input-group-outline .form-control');
        materialInputs.forEach(input => {
          input.addEventListener('focus', function() {
            this.parentElement.classList.add('focused', 'is-focused');
          });
          input.addEventListener('blur', function() {
            if (this.value === '') {
              this.parentElement.classList.remove('focused', 'is-focused');
            } else {
              this.parentElement.classList.remove('is-focused');
            }
          });
          if (input.value !== '') {
            input.parentElement.classList.add('focused');
          }
        });
      }
      
      // Pagination functionality
      function showPage(page) {
        document.querySelectorAll('#platforms-table .table-row').forEach(row => {
          row.style.display = 'none';
        });

        document.querySelectorAll(`#platforms-table .table-row[data-page="${page}"]`).forEach(row => {
          row.style.display = '';
        });

        document.querySelectorAll('#pagination .page-number').forEach(item => {
          item.classList.remove('active');
        });
        document.querySelector(`#pagination .page-number[data-page="${page}"]`)?.classList.add('active');
        document.querySelector('.page-prev').classList.toggle('disabled', page === 1);
        document.querySelector('.page-next').classList.toggle('disabled', page === totalPages || totalPages === 0);
        
        currentPage = page;
      }

      // Show first page initially
      showPage(1);

      document.querySelectorAll('#pagination .page-number').forEach(item => {
        item.addEventListener('click', function(e) {
          e.preventDefault();
          const page = parseInt(this.getAttribute('data-page'));
          showPage(page);
        });
      });

      document.querySelector('.page-prev')?.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage > 1) {
          showPage(currentPage - 1);
        }
      });

      document.querySelector('.page-next')?.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage < totalPages) {
          showPage(currentPage + 1);
        }
      });
      
      // Platform search functionality
      const platformSearch = document.getElementById('platform-search');
      platformSearch?.addEventListener('input', function() {
        const searchText = this.value.toLowerCase();
        let visibleItems = 0;
        
        document.querySelectorAll('#platforms-table .table-row').forEach(row => {
          const platformName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
          const platformUrl = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
          
          if (platformName.includes(searchText) || platformUrl.includes(searchText)) {
            row.style.display = '';
            visibleItems++;
          } else {
            row.style.display = 'none';
          }
        });
        
        // Show "no results" message if no matching platforms
        if (visibleItems === 0) {
          const noResultsRow = document.createElement('tr');
          noResultsRow.id = 'no-results-row';
          noResultsRow.innerHTML = '<td colspan="7" class="text-center py-4"><div class="alert alert-info mb-0"><h4><i class="material-symbols-rounded">search_off</i> No results found</h4><p>No platforms match your search criteria.</p></div></td>';
          
          const existingNoResults = document.getElementById('no-results-row');
          if (!existingNoResults) {
            document.querySelector('#platforms-table tbody').appendChild(noResultsRow);
          }
        } else {
          const existingNoResults = document.getElementById('no-results-row');
          if (existingNoResults) {
            existingNoResults.remove();
          }
        }
      });

      // Edit button click handler
      document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', function() {
          const platformRow = this.closest('tr');
          const platformData = JSON.parse(platformRow.dataset.platform);
          
          // Fill form with platform data
          document.getElementById('platform_id').value = platformData.platform_id;
          document.getElementById('platform_name').value = platformData.platform_name;
          document.getElementById('platform_url').value = platformData.platform_url;
          document.getElementById('platform_url_price').value = platformData.platform_url_price;
          document.getElementById('platform_url_merchant').value = platformData.platform_url_merchant;
          document.getElementById('platform_status').value = platformData.platform_status;
          document.getElementById('created_at').textContent = platformData.created_at || 'N/A';
          document.getElementById('updated_at').textContent = platformData.updated_at || 'N/A';
          
          document.querySelectorAll('#editPlatformForm .input-group-static').forEach(group => {
            const input = group.querySelector('input, select, textarea');
            if (input && input.value !== '') {
              group.classList.add('focused');
            }
          });
          
          // Show modal
          const editModal = new bootstrap.Modal(document.getElementById('editPlatformModal'));
          editModal.show();
        });
      });
      
      // Save button click handler
      document.getElementById('savePlatformBtn')?.addEventListener('click', async function() {
        const form = document.getElementById('editPlatformForm');
        
        // Basic form validation & fill the form data
        if (!form.checkValidity()) {
          form.reportValidity();
          return;
        }
        const formData = {
          platform_id: document.getElementById('platform_id').value,
          platform_name: document.getElementById('platform_name').value,
          platform_url: document.getElementById('platform_url').value,
          platform_url_price: document.getElementById('platform_url_price').value,
          platform_url_merchant: document.getElementById('platform_url_merchant').value,
          platform_status: document.getElementById('platform_status').value
        };
        
        try {
          // Show loading state
          const saveBtn = document.getElementById('savePlatformBtn');
          const originalBtnText = saveBtn.innerHTML;
          saveBtn.disabled = true;
          saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
          
          // Send API request to backend
          const response = await fetch(`${apiBaseUrl}/update_platform.php`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
          });
          
          const result = await response.json();
          
          // Reset button state and close modal
          saveBtn.disabled = false;
          saveBtn.innerHTML = originalBtnText;
          bootstrap.Modal.getInstance(document.getElementById('editPlatformModal')).hide();
          
          // Success & failure handling
          if (result.success) {
            showAlert('Success', 'Platform updated successfully!', 'success');
            const updatedRow = document.querySelector(`.edit-btn[data-platform-id="${formData.platform_id}"]`).closest('tr');
            if (updatedRow) {
              const cells = updatedRow.querySelectorAll('td');
              cells[1].querySelector('p').textContent = formData.platform_name;
              cells[2].querySelector('p').textContent = formData.platform_url;
              cells[3].querySelector('p').textContent = formData.platform_url_price;
              cells[4].querySelector('p').textContent = formData.platform_url_merchant;
              
              const existingBadge = cells[5].querySelector('.badge');
              if (existingBadge) {
                const newBadge = existingBadge.cloneNode(true);
                newBadge.className = existingBadge.className.replace('bg-gradient-success', '').replace('bg-gradient-danger', '');
                newBadge.classList.add(formData.platform_status === 'active' ? 'bg-gradient-success' : 'bg-gradient-danger');
                newBadge.textContent = formData.platform_status;
                existingBadge.replaceWith(newBadge);
              }
              
              const platformData = JSON.parse(updatedRow.dataset.platform);
              platformData.platform_name = formData.platform_name;
              platformData.platform_url = formData.platform_url;
              platformData.platform_url_price = formData.platform_url_price;
              platformData.platform_url_merchant = formData.platform_url_merchant;
              platformData.platform_status = formData.platform_status;
              platformData.updated_at = new Date().toISOString().replace('T', ' ').substr(0, 19);
              updatedRow.dataset.platform = JSON.stringify(platformData);
              
              // Highlight updated row (After update)
              updatedRow.classList.add('row-updated');
              setTimeout(() => {
                updatedRow.classList.remove('row-updated');
              }, 4000);
            }
          } else {
            showAlert('Error', result.message || 'Failed to update platform. Please try again.', 'error');
          }
        } catch (error) {
          console.error('Error updating platform:', error);
          showAlert('Error', 'An error occurred while updating the platform. Please try again.', 'error');
          document.getElementById('savePlatformBtn').disabled = false;
          document.getElementById('savePlatformBtn').innerHTML = originalBtnText;
        }
      });
      function showAlert(title, message, type) {
        const alertTitle = document.getElementById('alertTitle');
        const alertMessage = document.getElementById('alertMessage');
        
        alertTitle.textContent = title;
        alertMessage.textContent = message;
        
        if (type === 'error') {
          alertTitle.classList.add('text-danger');
          alertTitle.classList.remove('text-success');
        } else {
          alertTitle.classList.add('text-success');
          alertTitle.classList.remove('text-danger');
        }
        
        const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
        alertModal.show();
      }
    });
  </script>
</DashboardLayout>