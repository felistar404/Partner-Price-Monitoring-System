---
import DashboardLayout from "../../../layouts/dashboardLayout.astro";

const region = "hk";

// import { getRelativeLocaleUrl } from 'astro:i18n';
import translations from '../../../i18n';

const { currentLocale } = Astro;

const t = (key, defaultValue = '') => {
  const keys = key.split('.');
  let value = translations[currentLocale] || {};
  
  for (const k of keys) {
    if (!value || !value[k]) return defaultValue || key;
    value = value[k];
  }
  
  return value || defaultValue || key;
};

// Fetch your data here from API
const apiBaseUrl = import.meta.env.HK_PUBLIC_API_BASE || '/api';
let records = [];
let merchants = [];
let latestUpdate = null;

try {
  const response = await fetch(`${apiBaseUrl}/get_price_records.php`);
  const data = await response.json();
  records = data.records || [];
  
  // Fetch the latest update date
  const latestDateResponse = await fetch(`${apiBaseUrl}/get_latest_date.php`);
  const latestDateData = await latestDateResponse.json();
  latestUpdate = latestDateData.latest_update;
  
  // Fetch all merchants for contact information
  const merchantsResponse = await fetch(`${apiBaseUrl}/get_merchants.php`);
  const merchantsData = await merchantsResponse.json();
  merchants = merchantsData.records || [];
} catch (error) {
  console.error("Error:", error);
}

// Calculate counts
const overpriceCount = records.filter(r => r.price_status === 'overpriced').length;
const underpriceCount = records.filter(r => r.price_status === 'underpriced').length;
const missingCount = records.filter(r => r.price_status === 'missing').length;

// Group records by merchant
const merchantRecords: { [key: string]: any } = {};
const problematicMerchants = new Set();

records.forEach((record: any) => {
  if (!merchantRecords[record.merchant_id]) {
    merchantRecords[record.merchant_id] = {
      merchant_id: record.merchant_id,
      merchant_name: record.merchant_name,
      contact: merchants.find((m: any) => m.merchant_id === record.merchant_id) || {},
      records: [],
      hasProblems: false,
      platforms: new Set()
    };
  }
  
  merchantRecords[record.merchant_id].records.push(record);
  merchantRecords[record.merchant_id].platforms.add(record.platform_name);
  
  // Check if there are any price issues
  if (record.price_status === 'overpriced' || record.price_status === 'underpriced') {
    merchantRecords[record.merchant_id].hasProblems = true;
    problematicMerchants.add(record.merchant_id);
  }
});

// Convert to array for easier iteration in the template
const merchantList = Object.values(merchantRecords);

// Sort merchants to show problematic ones first
merchantList.sort((a, b) => {
  if (a.hasProblems && !b.hasProblems) return -1;
  if (!a.hasProblems && b.hasProblems) return 1;
  return a.merchant_name.localeCompare(b.merchant_name);
});

// Add pagination - 7 items per page
const itemsPerPage = 7;
const totalPages = Math.ceil(merchantList.length / itemsPerPage);

const paginationArray = [];
for (let i = 1; i <= totalPages; i++) {
  paginationArray.push(i);
}
---

<DashboardLayout 
  title="QNAP | Monitoring System"
  pageTitle={t('priceMonitor.title', 'Price Monitor Dashboard')};
  region={region}
  breadcrumbs={[
    { label: "Home", href: `/${region}/` },
    { label: "Price Records" }
  ]}
>
  <style>
    .detail-row {
      background-color: #f8f9fa;
      display: none;
    }
    .detail-row.show {
      display: table-row !important;
    }
    .status-badge.overpriced {
      background-color: #dc3545;
    }
    .status-badge.underpriced {
      background-color: #ffc107;
      color: #000;
    }
    .status-badge.acceptable {
      background-color: #6c757d;
    }
    .status-badge.missing {
      background-color: #0dcaf0;
    }
    .tooltip-text {
      position: absolute;
      top: -30px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #333;
      color: #fff;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 0.75rem;
      opacity: 0;
      transition: opacity 0.3s;
      pointer-events: none;
      white-space: nowrap;
      z-index: 1000;
    }
    .tooltip-text.show {
      opacity: 1;
    }
    .platform-pill {
      background-color: #e9ecef;
      border-radius: 16px;
      padding: 2px 8px;
      margin-right: 4px;
      font-size: 0.75rem;
      display: inline-block;
      margin-bottom: 4px;
    }
    .contact-info {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.5s ease;
    }
    .contact-info.show {
      max-height: 200px;
      margin-top: 1rem;
    }
    .action-buttons {
      white-space: nowrap;
    }
    .product-table {
      border-top: 1px solid #dee2e6;
      margin-top: 1rem;
      margin-bottom: 1rem;
    }
    .merchant-details-container {
      padding: 1rem;
    }
    .expand-icon {
      transition: transform 0.3s;
      display: inline-block;
      cursor: pointer;
    }
    .merchant-row.expanded .expand-icon {
      transform: rotate(180deg);
    }
    .avatar.avatar-sm {
      width: 32px;
      height: 32px;
    }
    .merchant-avatar {
      background-color: #e9ecef;
      color: #444;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 0.9rem;
    }
    .problematic-indicator {
      border-left: 4px solid #dc3545;
    }
    .acceptable-indicator {
      border-left: 4px solid #6c757d;
    }
    .badge.bg-gradient-success {
      background-image: linear-gradient(195deg, #66BB6A 0%, #43A047 100%);
    }
    .badge.bg-gradient-danger {
      background-image: linear-gradient(195deg, #EF5350 0%, #E53935 100%);
    }
    .badge.bg-gradient-neutral {
      background-image: linear-gradient(195deg, #78909c 0%, #546e7a 100%);
      color: white;
    }
    .badge-sm {
      padding: 0.35em 0.65em;
      font-size: 0.75em;
    }
    .progress {
      height: 6px;
      overflow: hidden;
    }
    
    .pagination {
      margin-bottom: 0;
    }
    
    .pagination .page-link {
      color: #344767;
    }
    
    .pagination .page-item.active .page-link {
      background-color: #344767;
      border-color: #344767;
      color: white;
    }
    
    .pagination .page-item.disabled .page-link {
      color: #6c757d;
    }
  </style>

<div class="row">
  <!-- Display Type Toggle -->
  <div class="row mb-3 mt-4">
    <div class="col-12 text-center">
      {latestUpdate && (
        <div class="text-muted mb-2">
          <small>{t('general.lastUpdated', 'Last updated: ')} {new Date(latestUpdate).toLocaleDateString()} - {new Date(latestUpdate).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</small>
        </div>
      )}
      
      <div class="btn-toolbar justify-content-center">
        <div class="ms-2">
          <button id="export-btn" class="btn btn-sm btn-outline-success" title="Export to Excel">
            <i class="material-symbols-rounded">download</i> {t('general.export', 'Export')}
          </button>
          <button id="refresh-btn" class="btn btn-sm btn-outline-primary" title="Refresh data">
            <i class="material-symbols-rounded">refresh</i> {t('general.refresh', 'Refresh')}
          </button>
        </div>

        <div class="btn-group me-2" role="group">
          <input type="radio" class="btn-check" name="display-toggle" id="show-all" checked>
          <!-- <label class="btn btn-outline-primary btn-sm" for="show-all">All Merchants</label> -->
          
          <input type="radio" class="btn-check" name="display-toggle" id="show-problems">
          <!-- <label class="btn btn-outline-danger btn-sm" for="show-problems">Problematic Only</label> -->
        </div>
      </div>
    </div>
  </div>


  <div class="container-fluid py-2">
    <div class="row">
      <div class="col-12">
        <div class="card my-4">
          <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
            <div class="bg-gradient-dark shadow-dark border-radius-lg pt-4 pb-3 d-flex justify-content-between align-items-center">
              <h6 class="text-white text-capitalize ps-3 mb-0">{t('priceMonitor.summary', 'Price Record Summary')}</h6>
            </div>
          </div>
          
          <div class="card-body px-0 pb-2">
            <!-- Merchant Table -->
            <div class="table-responsive p-0">
              <table class="table align-items-center mb-0">
                <thead>
                  <tr>
                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">{t('priceMonitor.merchant', 'Merchant')}</th>
                    <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">{t('priceMonitor.status', 'Status')}</th>
                    <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">{t('priceMonitor.issues', 'Issues')}</th>
                    <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">{t('priceMonitor.actions', 'Actions')}</th>
                  </tr>
                </thead>
                <tbody>
                  {merchantList.length > 0 ? (
                    merchantList.map((merchant, index) => (
                      <>
                        <tr class={`merchant-row ${merchant.hasProblems ? 'problematic-indicator' : 'acceptable-indicator'}`} 
                            data-merchant-id={merchant.merchant_id}
                            data-has-problems={merchant.hasProblems.toString()}
                            data-page={Math.floor(index / itemsPerPage) + 1}>
                          <td>
                            <div class="d-flex px-2 py-1">
                              <div>
                                {merchant.hasProblems ? (
                                  <div class="avatar avatar-sm me-3 bg-gradient-danger merchant-avatar rounded-circle">
                                    <i class="material-symbols-rounded text-white">warning</i>
                                  </div>
                                ) : (
                                  <div class="avatar avatar-sm me-3 bg-gradient-neutral merchant-avatar rounded-circle">
                                    <i class="material-symbols-rounded text-white">check</i>
                                  </div>
                                )}
                              </div>
                              <div class="d-flex flex-column justify-content-center">
                                <h6 class="mb-0 text-sm">{merchant.merchant_name}</h6>
                                <p class="text-xs text-secondary mb-0">
                                  {merchant.contact.email || 'No email available'}
                                  {merchant.contact.phone && ` (Tel: ${merchant.contact.phone})`}
                                </p>
                              </div>
                            </div>
                          </td>
                          <td class="align-middle text-center text-sm">
                            {merchant.hasProblems 
                              ? <span class="badge badge-sm bg-gradient-danger">{t('priceMonitor.pricingIssues', 'Pricing Issues')}</span>
                              : <span class="badge badge-sm bg-gradient-neutral">{t('priceMonitor.acceptable', 'Acceptable')}</span>
                            }
                          </td>
                          <td class="align-middle text-center">
                            {merchant.hasProblems && (
                              <span class="text-xs font-weight-bold">
                                {merchant.records.filter(r => r.price_status !== 'acceptable').length} {t('priceMonitor.small_issues', 'issues')}
                              </span>
                            )}
                            {!merchant.hasProblems && (
                              <span class="text-xs font-weight-bold">
                                {t('priceMonitor.noIssues', 'No issue')}
                              </span>
                            )}
                          </td>
                          <td class="align-middle text-center">
                            <span class="expand-icon">
                              <button class="btn btn-link text-info mb-0 expand-toggle-btn" title="View Products">
                                <i class="material-symbols-rounded">visibility</i>
                              </button>
                            </span>
                            {merchant.hasProblems && (
                              <button class="btn btn-link text-primary mb-0 copy-message-btn position-relative" data-merchant-id={merchant.merchant_id} title="Copy Message">
                                <i class="material-symbols-rounded">content_copy</i>
                                <span class="tooltip-text">{t('priceMonitor.messageCopied', 'Message copied!')}</span>
                              </button>
                            )}
                          </td>
                        </tr>
                        <tr class="detail-row" id={`detail-${merchant.merchant_id}`} data-page={Math.floor(index / itemsPerPage) + 1}>
                          <td colspan="5" class="p-0">
                            <div class="merchant-details-container">
                              <h6 class="text-uppercase text-xxs text-xs font-weight-bolder mb-3">{t('priceMonitor.outstandingProducts', 'List of outstanding products from platform')}</h6>
                              <div class="product-table">
                                <table class="table table-sm table-striped align-items-center mb-0">
                                  <thead>
                                    <tr>
                                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder">{t('priceMonitor.table_info.product', 'Product')}</th>
                                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder">{t('priceMonitor.table_info.platform', 'Platform')}</th>
                                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder">{t('priceMonitor.table_info.price', 'Price')}</th>
                                      <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder">{t('priceMonitor.table_info.status', 'Status')}</th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    {merchant.records.map((record) => (
                                      <tr>
                                        <td>
                                          <p class="text-xs font-weight-bold mb-0">{record.product_name}</p>
                                          <p class="text-xs text-secondary mb-0">{record.product_model}</p>
                                        </td>
                                        <td>
                                          <p class="text-xs font-weight-bold mb-0">{record.platform_name}</p>
                                        </td>
                                        <td>
                                          <p class="text-xs font-weight-bold mb-0">{record.price} {record.currency}</p>
                                        </td>
                                        <td class="align-middle text-center text-sm">
                                          <span class={`badge badge-sm status-badge ${record.price_status}`}>
                                            {record.price_status === 'overpriced' ? t('priceMonitor.overpriced', 'Overpriced') : 
                                             record.price_status === 'underpriced' ? t('priceMonitor.underpriced', 'Underpriced') : 
                                             record.price_status === 'missing' ? 'Missing' : t('priceMonitor.acceptable', 'Acceptable')}
                                          </span>
                                        </td>
                                      </tr>
                                    ))}
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </td>
                        </tr>
                      </>
                    ))
                  ) : (
                    <tr>
                      <td colspan="4" class="text-center py-4">
                        <div class="alert alert-info mb-0">
                          <h4><i class="material-symbols-rounded">info</i>{t('priceMonitor.noRecordsFound', ' No records found')}</h4>
                          <p>{t('priceMonitor.noRecordsDescription', 'There are no price records available. Click the refresh button to fetch the latest data.')}</p>
                        </div>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
          
          <!-- Card Footer with Pagination -->
          {totalPages > 1 && (
            <div class="card-footer d-flex justify-content-center">
              <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="pagination">
                  <li class="page-item page-prev disabled">
                    <a class="page-link" href="#" tabindex="-1">
                      <i class="material-symbols-rounded">chevron_left</i>
                    </a>
                  </li>
                  {paginationArray.map(pageNum => (
                    <li class={`page-item page-number ${pageNum === 1 ? 'active' : ''}`} data-page={pageNum}>
                      <a class="page-link" href="#">{pageNum}</a>
                    </li>
                  ))}
                  <li class={`page-item page-next ${totalPages <= 1 ? 'disabled' : ''}`}>
                    <a class="page-link" href="#">
                      <i class="material-symbols-rounded">chevron_right</i>
                    </a>
                  </li>
                </ul>
              </nav>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Processing Modal -->
  <div class="modal fade" id="processingModal" tabindex="-1" aria-labelledby="processingModalLabel" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="processingModalLabel">{t('priceMonitor.dataFetchingInProgress', 'Data fetching in Progress')}</h5>
        </div>
        <div class="modal-body text-center">
          <div class="spinner-border text-primary mb-3" role="status">
            <span class="visually-hidden">{t('general.loading', 'Loading')}</span>
          </div>
          <div id="processingStatus">{t('priceMonitor.refreshingData', 'Refreshing data, please wait...')}</div>
          <div class="progress mt-3">
            <div id="processingProgress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ merchantList, records, totalPages }}>
    document.addEventListener('DOMContentLoaded', function() {
      // Toggle row expansion
      document.querySelectorAll('.expand-toggle-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          
          const merchantRow = this.closest('.merchant-row');
          const merchantId = merchantRow.getAttribute('data-merchant-id');
          const detailRow = document.getElementById(`detail-${merchantId}`);

          merchantRow.classList.toggle('expanded');
          detailRow.classList.toggle('show');
        });
      });
      
      document.getElementById('show-problems').addEventListener('change', function() {
        if (this.checked) {
          document.querySelectorAll('.merchant-row[data-has-problems="false"]').forEach(row => {
            row.style.display = 'none';
            const merchantId = row.getAttribute('data-merchant-id');
            document.getElementById(`detail-${merchantId}`).style.display = 'none';
          });
          
          // Reset pagination when filtering
          resetPagination();
        }
      });
      
      document.getElementById('show-all').addEventListener('change', function() {
        if (this.checked) {
          // Reset to page 1 when showing all
          showPage(1);
        }
      });
      
      // Reset pagination to calculate page numbers after filtering
      function resetPagination() {
        const visibleRows = document.querySelectorAll('.merchant-row:not([style*="display: none"])');
        if (visibleRows.length > 0) {
          // Show first page after filtering
          showPage(1);
        }
      }
      
      // Pagination functionality
      let currentPage = 1;
      
      function showPage(page) {
        document.querySelectorAll('.merchant-row, .detail-row').forEach(row => {
          row.style.display = 'none';
        });

        document.querySelectorAll(`.merchant-row[data-page="${page}"]`).forEach(row => {
          row.style.display = 'table-row';
          
          // Show detail row if it was expanded
          const merchantId = row.getAttribute('data-merchant-id');
          const detailRow = document.getElementById(`detail-${merchantId}`);
          if (row.classList.contains('expanded')) {
            detailRow.style.display = 'table-row';
          }
        });

        document.querySelectorAll('#pagination .page-number').forEach(item => {
          item.classList.remove('active');
        });
        document.querySelector(`#pagination .page-number[data-page="${page}"]`)?.classList.add('active');
        document.querySelector('.page-prev').classList.toggle('disabled', page === 1);
        document.querySelector('.page-next').classList.toggle('disabled', page === totalPages || totalPages === 0);
        
        currentPage = page;
      }

      // Show first page initially
      showPage(1);

      document.querySelectorAll('#pagination .page-number').forEach(item => {
        item.addEventListener('click', function(e) {
          e.preventDefault();
          const page = parseInt(this.getAttribute('data-page'));
          showPage(page);
        });
      });

      document.querySelector('.page-prev')?.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage > 1) {
          showPage(currentPage - 1);
        }
      });

      document.querySelector('.page-next')?.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage < totalPages) {
          showPage(currentPage + 1);
        }
      });
      
      // Copy message functionality
      document.querySelectorAll('.copy-message-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const merchantId = this.getAttribute('data-merchant-id');
          const tooltip = this.querySelector('.tooltip-text');
          
          // Find merchant data
          const merchantData = JSON.parse(`${JSON.stringify(merchantList.find(m => m.merchant_id == merchantId))}`);
          
          if (merchantData) {
            // Create message text
            let messageText = `${merchantData.merchant_name},\n\n`;
            messageText += t('messages.intro', 'Customized message text 00');
            
            // Add each problematic product
            let hasProblematicProducts = false;
            
            merchantData.records.forEach(record => {
              if (record.price_status !== 'acceptable') {
                hasProblematicProducts = true;
                
                // Determine issue message
                let issueMessage = '';
                if (record.price_status === 'overpriced') {
                  issueMessage = t('messages.overpriced', 'is priced above our recommended retail price');
                } else if (record.price_status === 'underpriced') {
                  issueMessage = t('messages.underpriced', 'is priced below our recommended retail price');
                } else if (record.price_status === 'missing') {
                  issueMessage = t('messages.missing', 'is missing pricing information');
                }
                
                messageText += `• ${record.product_name} (${record.product_model}) on ${record.platform_name} ${issueMessage}.\n`;
              }
            });
            
            messageText += t('messages.outro1', 'Customized message text 01');
            messageText += t('messages.outro2', 'Customized message text 02');
            messageText += t('messages.outro3', 'Customized message text 03');
            
            navigator.clipboard.writeText(messageText).then(() => {
              tooltip.classList.add('show');
              setTimeout(() => {
                tooltip.classList.remove('show');
              }, 2000);
            });
          }
        });
      });
      
      // Refresh button
      const refreshBtn = document.getElementById('refresh-btn');
      refreshBtn?.addEventListener('click', async function() {
        refreshBtn.disabled = true;
        refreshBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Refreshing...';

        const processingModal = new bootstrap.Modal(document.getElementById('processingModal'));
        processingModal.show();

        try {
          // After successful refresh, reload the page to get updated data
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } catch (error) {
          console.error('Error refreshing data:', error);
          refreshBtn.disabled = false;
          refreshBtn.innerHTML = '<i class="material-symbols-rounded">refresh</i> Refresh';
          processingModal.hide();
        }
      });
      
      // Export functionality
      document.getElementById('export-btn')?.addEventListener('click', function() {
        const data = JSON.parse(`${JSON.stringify(records)}`);
        
        // Create CSV content
        let csvContent = "data:text/csv;charset=utf-8," +
          "Merchant,Platform,Product Name,Product Model,Price,Status\n";
        
        data.forEach(record => {
          csvContent += `"${record.merchant_name}","${record.platform_name}","${record.product_name}","${record.product_model}",${record.price || 'N/A'},"${record.price_status}"\n`;
        });
        
        // Create download link
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", `price_records_${new Date().toISOString().split('T')[0]}.csv`);
        document.body.appendChild(link);
        
        // Trigger download
        link.click();
        document.body.removeChild(link);
      });
    });
  </script>
</DashboardLayout>