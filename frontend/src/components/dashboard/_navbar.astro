---
import { getRelativeLocaleUrl } from 'astro:i18n';
import translations from '../../i18n';

const { currentLocale, url } = Astro;
const t = (key, defaultValue = '') => {
  const keys = key.split('.');
  let value = translations[currentLocale] || {};
  
  for (const k of keys) {
    if (!value || !value[k]) return defaultValue || key;
    value = value[k];
  }
  
  return value || defaultValue || key;
};

interface Props {
  pageTitle?: string;
  breadcrumbs?: Array<{label: string, href?: string}>;
}

const { 
  pageTitle = t("dashboard.title", "Price Records"),
  breadcrumbs = [
    { label: t("common.home", "Pages") },
    { label: pageTitle }
  ]
} = Astro.props;

let currentPath = url.pathname;

const localePattern = new RegExp(`^/(${["en", "zh-hant", "zh-hans"].join("|")})/`);
currentPath = currentPath.replace(localePattern, '');


if (!currentPath) currentPath = '';

// Get URLs for language switching
const enUrl = getRelativeLocaleUrl("en", currentPath);
const zhHantUrl = getRelativeLocaleUrl("zh-hant", currentPath);
const zhHansUrl = getRelativeLocaleUrl("zh-hans", currentPath);
---

<nav class="navbar navbar-main navbar-expand-lg px-0 mx-3 shadow-none border-radius-xl navbar-with-border" id="navbarBlur" data-scroll="true">
  <div class="container-fluid py-1 px-3">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
        {breadcrumbs.map((item, index) => (
          <li class={`breadcrumb-item text-sm ${index === breadcrumbs.length - 1 ? 'text-dark active' : 'opacity-5 text-dark'}`} aria-current={index === breadcrumbs.length - 1 ? 'page' : undefined}>
            {item.href ? 
              <a href={item.href}>{item.label}</a> : 
              item.label
            }
          </li>
        ))}
      </ol>
    </nav>
    
    <!-- Navbar elements -->
    <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
      <!-- Push element towards right-handed side -->
      <div class="ms-md-auto pe-md-3 d-flex align-items-center">
        <div class="input-group input-group-outline">
        </div>
      </div>
      
      <!-- Right-side navbar items -->
      <ul class="navbar-nav px-3 d-flex align-items-center justify-content-end">
        
        <!-- Mobile menu button -->
        <li class="nav-item px-3 d-xl-none d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="iconNavbarSidenav">
            <div class="sidenav-toggler-inner">
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
              <i class="sidenav-toggler-line"></i>
            </div>
          </a>
        </li>
        
        <!-- Fullscreen button -->
        <li class="nav-item d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0" id="fullscreenButton">
            <i class="material-symbols-rounded fullscreen-icon">fullscreen</i>
          </a>
        </li>
        
        <!-- Settings -->
        <li class="nav-item px-3 d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body p-0">
            <i class="material-symbols-rounded fixed-plugin-button-nav">settings</i>
          </a>
        </li>
        
        <!-- Select language dropdown -->
        <li class="nav-item dropdown d-flex align-items-center">
          <a href="javascript:;" class="nav-link text-body font-weight-bold px-0" id="languageDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="material-symbols-rounded me-1">language</i>
          </a>
          <ul class="dropdown-menu dropdown-menu-end px-2 py-1" aria-labelledby="languageDropdown">
            <li>
              <a class="dropdown-item border-radius-md language-option" href={enUrl}>
                <div class="d-flex align-items-center justify-content-between py-1 w-100">
                  <div>English</div>
                  {currentLocale === 'en' && <i class="material-symbols-rounded text-success ms-2">check</i>}
                </div>
              </a>
            </li>
            <li>
              <a class="dropdown-item border-radius-md language-option" href={zhHantUrl}>
                <div class="d-flex align-items-center justify-content-between py-1 w-100">
                  <div>繁體中文</div>
                  {currentLocale === 'zh-hant' && <i class="material-symbols-rounded text-success ms-2">check</i>}
                </div>
              </a>
            </li>
            <li>
              <a class="dropdown-item border-radius-md language-option" href={zhHansUrl}>
                <div class="d-flex align-items-center justify-content-between py-1 w-100">
                  <div>简体中文</div>
                  {currentLocale === 'zh-hans' && <i class="material-symbols-rounded text-success ms-2">check</i>}
                </div>
              </a>
            </li>
          </ul>
        </li>

      </ul>
    </div>
  </div>
</nav>

<script>
  // Fullscreen functionality
  document.addEventListener('DOMContentLoaded', () => {
    const fullscreenButton = document.getElementById('fullscreenButton');
    const fullscreenIcon = fullscreenButton.querySelector('.fullscreen-icon');
    
    fullscreenButton.addEventListener('click', () => {
      if (!document.fullscreenElement) {
        // Enter fullscreen
        if (document.documentElement.requestFullscreen) {
          document.documentElement.requestFullscreen();
          fullscreenIcon.textContent = 'fullscreen_exit';
        }
      } else {
        // Exit fullscreen
        if (document.exitFullscreen) {
          document.exitFullscreen();
          fullscreenIcon.textContent = 'fullscreen';
        }
      }
    });
    
    // Update icon when fullscreen changes outside of our control (e.g., Esc key)
    document.addEventListener('fullscreenchange', () => {
      if (document.fullscreenElement) {
        fullscreenIcon.textContent = 'fullscreen_exit';
      } else {
        fullscreenIcon.textContent = 'fullscreen';
      }
    });
  });
</script>

<style>
  .navbar-with-border {
    box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.06), 0 1px 2px 0px rgba(0, 0, 0, 0.03), 0 1px 1px 0px rgba(0, 0, 0, 0.02) !important;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .dropdown-item.active-language {
    background-color: rgba(76, 175, 80, 0.1);
  }

  /* Updated CSS to align the sidebar toggle button */
  .sidenav-toggler-inner {
    width: 18px;
    height: 18px;
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .sidenav-toggler-line {
    height: 2px;
    background-color: #344767;
    margin-bottom: 3px;
    transition: all 0.15s ease;
  }

  .sidenav-toggler-line:last-child {
    margin-bottom: 0;
  }

  .nav-link.text-body {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 0;
    height: 100%;
  }

  .navbar-nav .nav-item {
    display: flex;
    align-items: center;
    height: 40px;
  }

  .nav-item.d-xl-none {
    /* padding-right: 0.75rem !important;
    padding-left: 0.75rem !important; */
  }
</style>