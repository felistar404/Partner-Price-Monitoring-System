---
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";

const title = "QNAP | Monitoring System";
const path = "../../../dist";
const mainPage = "dashboard";
const page = "add-product";

// Extract API base URL to pass to client script
const apiBaseUrl = import.meta.env.PUBLIC_API_BASE;
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />
  </head>
  <!--end::Head-->
  <!--begin::Body-->
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">Add New Product</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">Home</a></li>
                  <li class="breadcrumb-item">Add Items</li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Products
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content Header-->
        <!--begin::App Content-->
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Card-->
            <div class="card">
              <div class="card-header">
                <h3 class="card-title">Add New Product</h3>
              </div>
              <div class="card-body">
                <form id="addProductForm">
                  <div class="row mb-3">
                    <div class="col-md-6">
                      <div class="form-group">
                        <label for="product_name" class="form-label">Product Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="product_name" name="product_name" required>
                        <div class="invalid-feedback">Product name is required</div>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="form-group">
                        <label for="product_model" class="form-label">Product Model <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="product_model" name="product_model" required>
                        <div class="invalid-feedback">Product model is required</div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="row mb-3">
                    <div class="col-md-4">
                      <div class="form-group">
                        <label for="reference_price" class="form-label">Reference Price <span class="text-danger">*</span></label>
                        <div class="input-group">
                          <span class="input-group-text">$</span>
                          <input type="number" class="form-control" id="reference_price" name="reference_price" step="0.01" min="0" required>
                        </div>
                        <div class="invalid-feedback">Reference price is required</div>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="form-group">
                        <label for="min_acceptable_price" class="form-label">Min Acceptable Price <span class="text-danger">*</span></label>
                        <div class="input-group">
                          <span class="input-group-text">$</span>
                          <input type="number" class="form-control" id="min_acceptable_price" name="min_acceptable_price" step="0.01" min="0" required>
                        </div>
                        <div class="invalid-feedback">Min acceptable price is required</div>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="form-group">
                        <label for="max_acceptable_price" class="form-label">Max Acceptable Price <span class="text-danger">*</span></label>
                        <div class="input-group">
                          <span class="input-group-text">$</span>
                          <input type="number" class="form-control" id="max_acceptable_price" name="max_acceptable_price" step="0.01" min="0" required>
                        </div>
                        <div class="invalid-feedback">Max acceptable price is required</div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="row mb-3">
                    <div class="col-md-6">
                      <div class="form-group">
                        <label for="product_status" class="form-label">Status <span class="text-danger">*</span></label>
                        <select class="form-select" id="product_status" name="product_status" required>
                          <option value="" disabled selected>Select status</option>
                          <option value="active">Active</option>
                          <option value="inactive">Inactive</option>
                        </select>
                        <div class="invalid-feedback">Please select a status</div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="mb-3">
                    <label for="product_description" class="form-label">Description</label>
                    <textarea class="form-control" id="product_description" name="product_description" rows="4"></textarea>
                  </div>
                  
                  <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="button" class="btn btn-secondary me-md-2" id="resetBtn">Reset</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Add Product</button>
                  </div>
                </form>
              </div>
            </div>
            <!--end::Card-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content-->
      </main>
      <!--end::App Main-->
      <Footer />
    </div>
    <!--end::App Wrapper-->
    
    <!-- Success/Error Alert Modal -->
    <div class="modal fade" id="alertModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="alertTitle">Success</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div id="alertMessage"></div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="alertOkBtn">OK</button>
          </div>
        </div>
      </div>
    </div>
    
    <!--begin::Script-->
    <Scripts path={path} />

    <script is:inline define:vars={{ apiBaseUrl }}>
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('addProductForm');
        const resetBtn = document.getElementById('resetBtn');
        const submitBtn = document.getElementById('submitBtn');
        
        // Reset form handler
        resetBtn.addEventListener('click', function() {
          form.reset();
          // Remove validation classes
          form.classList.remove('was-validated');
          const inputs = form.querySelectorAll('input, select, textarea');
          inputs.forEach(input => {
            input.classList.remove('is-invalid');
            input.classList.remove('is-valid');
          });
        });
        
        // Add form validation and submission
        form.addEventListener('submit', async function(event) {
          event.preventDefault();
          
          // Client-side validation
          if (!form.checkValidity()) {
            event.stopPropagation();
            form.classList.add('was-validated');
            return;
          }
          
          // Price validation
          const refPrice = parseFloat(document.getElementById('reference_price').value);
          const minPrice = parseFloat(document.getElementById('min_acceptable_price').value);
          const maxPrice = parseFloat(document.getElementById('max_acceptable_price').value);
          
          if (minPrice > refPrice) {
            showAlert('Validation Error', 'Minimum price cannot be greater than reference price', 'error');
            document.getElementById('min_acceptable_price').classList.add('is-invalid');
            return;
          }
          
          if (maxPrice < refPrice) {
            showAlert('Validation Error', 'Maximum price cannot be less than reference price', 'error');
            document.getElementById('max_acceptable_price').classList.add('is-invalid');
            return;
          }
          
          // Form data
          const formData = {
            product_name: document.getElementById('product_name').value,
            product_model: document.getElementById('product_model').value,
            reference_price: refPrice,
            min_acceptable_price: minPrice,
            max_acceptable_price: maxPrice,
            product_status: document.getElementById('product_status').value,
            product_description: document.getElementById('product_description').value
          };
          
          try {
            // show loading state & send request to backend
            submitBtn.disabled = true;
            const originalBtnText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
            
            // Send API request
            const response = await fetch(`${apiBaseUrl}/add_product.php`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            // reset button state
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
            
            if (result.success) {
              // show success message
              showAlert('Success', 'Product added successfully!', 'success', true);
            } else {
              // show error message
              showAlert('Error', result.message || 'Failed to add product. Please try again.', 'error');
            }
          } catch (error) {
            console.error('Error adding product:', error);
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
            showAlert('Error', 'An error occurred while adding the product. Please try again.', 'error');
          }
        });
        
        // call this to show alert modal
        function showAlert(title, message, type, resetFormOnClose = false) {
          const alertModal = document.getElementById('alertModal');
          const alertTitle = document.getElementById('alertTitle');
          const alertMessage = document.getElementById('alertMessage');
          const modalInstance = new bootstrap.Modal(alertModal);
          
          alertTitle.textContent = title;
          alertMessage.textContent = message;
          
          if (type === 'error') {
            alertTitle.classList.add('text-danger');
            alertTitle.classList.remove('text-success');
          } else {
            alertTitle.classList.add('text-success');
            alertTitle.classList.remove('text-danger');
          }
          
          modalInstance.show();
          
          if (resetFormOnClose) {
            document.getElementById('alertOkBtn').addEventListener('click', function onceHandler() {
              form.reset();
              form.classList.remove('was-validated');
              const inputs = form.querySelectorAll('input, select, textarea');
              inputs.forEach(input => {
                input.classList.remove('is-invalid');
                input.classList.remove('is-valid');
              });
              this.removeEventListener('click', onceHandler);
            });
          }
        }
        
        // Add input validation event listeners
        const inputs = form.querySelectorAll('input, select');
        inputs.forEach(input => {
          input.addEventListener('change', function() {
            if (this.checkValidity()) {
              this.classList.remove('is-invalid');
              this.classList.add('is-valid');
            } else {
              this.classList.remove('is-valid');
              this.classList.add('is-invalid');
            }
          });
        });
        
        // Specific validation for min/max prices
        document.getElementById('min_acceptable_price').addEventListener('change', function() {
          const refPrice = parseFloat(document.getElementById('reference_price').value);
          const minPrice = parseFloat(this.value);
          
          if (minPrice > refPrice) {
            this.classList.add('is-invalid');
            this.setCustomValidity('Min price cannot exceed reference price');
          } else {
            this.classList.remove('is-invalid');
            this.classList.add('is-valid');
            this.setCustomValidity('');
          }
        });
        
        document.getElementById('max_acceptable_price').addEventListener('change', function() {
          const refPrice = parseFloat(document.getElementById('reference_price').value);
          const maxPrice = parseFloat(this.value);
          
          if (maxPrice < refPrice) {
            this.classList.add('is-invalid');
            this.setCustomValidity('Max price cannot be less than reference price');
          } else {
            this.classList.remove('is-invalid');
            this.classList.add('is-valid');
            this.setCustomValidity('');
          }
        });
        
        document.getElementById('reference_price').addEventListener('change', function() {
          // Revalidate min and max when reference changes
          const minEl = document.getElementById('min_acceptable_price');
          const maxEl = document.getElementById('max_acceptable_price');
          
          if (minEl.value) {
            const event = new Event('change');
            minEl.dispatchEvent(event);
          }
          
          if (maxEl.value) {
            const event = new Event('change');
            maxEl.dispatchEvent(event);
          }
        });
      });
    </script>
    <!--end::Script-->
  </body><!--end::Body-->
</html>
