---
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";

const title = "QNAP | Monitoring System";
const path = "../../../dist";
const mainPage = "dashboard";
const page = "add-product-to-platform";

// Extract API base URL to pass to client script
const apiBaseUrl = import.meta.env.PUBLIC_API_BASE;

// Fetch all products from the database
let products = [];
try {
  const response = await fetch(`${apiBaseUrl}/get_products.php`);
  const data = await response.json();
  products = data.records || [];
} catch (error) {
  console.error("Error fetching products:", error);
}

// Fetch all platforms from the database
let platforms = [];
try {
  const response = await fetch(`${apiBaseUrl}/get_platforms.php`);
  const data = await response.json();
  platforms = data.records || [];
} catch (error) {
  console.error("Error fetching platforms:", error);
}
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />
  </head>
  <!--end::Head-->
  <!--begin::Body-->
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">Link Product to Platform</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">Home</a></li>
                  <li class="breadcrumb-item">Add Items</li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Product to Platform
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content Header-->
        <!--begin::App Content-->
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Card-->
            <div class="card">
              <div class="card-header">
                <h3 class="card-title">Link Product to Platform</h3>
              </div>
              <div class="card-body">
                <form id="productToPlatformForm">
                  <div class="row mb-4">
                    <div class="col-md-6">
                      <div class="form-group">
                        <label for="product_id" class="form-label">Select Product <span class="text-danger">*</span></label>
                        <select class="form-select" id="product_id" name="product_id" required style="height: auto;">
                          <option value="" disabled selected>Select a product</option>
                          {products.map((product: { product_id: string; product_name: string; product_model: string }) => (
                            <option value={product.product_id}>{product.product_name} - {product.product_model}</option>
                          ))}
                        </select>
                        <div class="invalid-feedback">Please select a product</div>
                        {products.length === 0 && (
                          <div class="text-warning mt-2">
                            <small>No products found. Please <a href="/html/pages/add/product">add a product</a> first.</small>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div class="col-md-6">
                      <div class="form-group">
                        <label for="platform_id" class="form-label">Select Platform <span class="text-danger">*</span></label>
                        <select class="form-select" id="platform_id" name="platform_id" required style="height: auto;">
                          <option value="" disabled selected>Select a platform</option>
                          {platforms.map((platform: { platform_id: string; platform_name: string }) => (
                            <option value={platform.platform_id}>{platform.platform_name}</option>
                          ))}
                        </select>
                        <div class="invalid-feedback">Please select a platform</div>
                        {platforms.length === 0 && (
                          <div class="text-warning mt-2">
                            <small>No platforms found. Please <a href="/html/pages/add/platform">add a platform</a> first.</small>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  <div class="row mb-4">
                    <div class="col-md-12">
                      <div class="form-group">
                        <label for="platform_product_id" class="form-label">Platform Product ID <span class="text-danger">*</span></label>
                        <div class="input-group">
                          <input type="text" class="form-control" id="platform_product_id" name="platform_product_id" 
                            placeholder="Enter the unique product identifier used on this platform" required>
                          <span class="input-group-text" id="url-preview">
                            <i class="bi bi-link-45deg"></i>
                          </span>
                        </div>
                        <div class="invalid-feedback">Platform product ID is required</div>
                        <small class="form-text text-muted">This is the unique identifier for the product on the selected platform (e.g. "633588" for a product with URL "https://www.example.com/product.php?p=633588")</small>
                      </div>
                    </div>
                  </div>

                  <div class="row mb-3">
                    <div class="col-12">
                      <div class="alert alert-info" id="url-preview-container" style="display: none;">
                        <strong>URL Preview:</strong>
                        <span id="url-preview-text">N/A</span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="button" class="btn btn-secondary me-md-2" id="resetBtn">Reset</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Link Product</button>
                  </div>
                </form>
              </div>
            </div>
            <!--end::Card-->

            <!-- Current Mappings -->
            <div class="card mt-4">
              <div class="card-header">
                <h3 class="card-title">Current Product-Platform Mappings</h3>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-bordered table-striped" id="mappings-table">
                    <thead>
                      <tr>
                        <th>Product</th>
                        <th>Platform</th>
                        <th>Platform Product ID</th>
                        <th>Full URL</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody id="mappings-tbody">
                      <tr>
                        <td colspan="5" class="text-center">Loading mappings...</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content-->
      </main>
      <!--end::App Main-->
      <Footer />
    </div>
    <!--end::App Wrapper-->
    
    <!-- Success/Error Alert Modal -->
    <div class="modal fade" id="alertModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="alertTitle">Success</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div id="alertMessage"></div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="alertOkBtn">OK</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Confirm Deletion</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to delete this product-platform mapping?</p>
            <p id="delete-mapping-info"></p>
          </div>
          <div class="modal-footer">
            <input type="hidden" id="delete-mapping-id">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
          </div>
        </div>
      </div>
    </div>
    
    <!--begin::Script-->
    <Scripts path={path} />

    <script is:inline define:vars={{ apiBaseUrl, products, platforms }}>
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('productToPlatformForm');
        const resetBtn = document.getElementById('resetBtn');
        const submitBtn = document.getElementById('submitBtn');
        const urlPreviewContainer = document.getElementById('url-preview-container');
        const urlPreviewText = document.getElementById('url-preview-text');
        
        // Platform and product data for local use
        const platformsData = platforms; 
        const productsData = products;
        
        // Load existing mappings
        loadMappings();
        
        // Reset form handler
        resetBtn.addEventListener('click', function() {
          form.reset();
          // Remove validation classes
          form.classList.remove('was-validated');
          const inputs = form.querySelectorAll('input, select');
          inputs.forEach(input => {
            input.classList.remove('is-invalid');
            input.classList.remove('is-valid');
          });
          
          // Hide URL preview
          urlPreviewContainer.style.display = 'none';
        });
        
        // Generate URL preview when platform or product ID changes
        document.getElementById('platform_id').addEventListener('change', updateUrlPreview);
        document.getElementById('platform_product_id').addEventListener('input', updateUrlPreview);
        
        function updateUrlPreview() {
          const platformId = document.getElementById('platform_id').value;
          const productId = document.getElementById('platform_product_id').value;
          
          if (platformId && productId) {
            const platform = platformsData.find(p => p.platform_id == platformId);
            
            if (platform) {
              const previewUrl = platform.platform_url + platform.platform_url_price + productId;
              urlPreviewText.textContent = previewUrl;
              urlPreviewContainer.style.display = 'block';
            }
          } else {
            urlPreviewContainer.style.display = 'none';
          }
        }
        
        // Add form validation and submission
        form.addEventListener('submit', async function(event) {
          event.preventDefault();
          
          // Client-side validation
          if (!form.checkValidity()) {
            event.stopPropagation();
            form.classList.add('was-validated');
            return;
          }
          
          // Form data
          const formData = {
            product_id: document.getElementById('product_id').value,
            platform_id: document.getElementById('platform_id').value,
            platform_product_id: document.getElementById('platform_product_id').value
          };
          
          try {
            // Show loading state & send request to backend
            submitBtn.disabled = true;
            const originalBtnText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Linking...';
            
            // Send API request
            const response = await fetch(`${apiBaseUrl}/add_product_to_platform.php`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            // Reset button state
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
            
            if (result.success) {
              // Show success message
              showAlert('Success', 'Product linked to platform successfully!', 'success', true);
              // Reload mappings table
              loadMappings();
            } else {
              // Show error message
              showAlert('Error', result.message || 'Failed to link product to platform. Please try again.', 'error');
            }
          } catch (error) {
            console.error('Error linking product to platform:', error);
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
            showAlert('Error', 'An error occurred while linking the product to platform. Please try again.', 'error');
          }
        });
        
        // Function to show alert modal
        function showAlert(title, message, type, resetFormOnClose = false) {
          const alertModal = document.getElementById('alertModal');
          const alertTitle = document.getElementById('alertTitle');
          const alertMessage = document.getElementById('alertMessage');
          const modalInstance = new bootstrap.Modal(alertModal);
          
          alertTitle.textContent = title;
          alertMessage.textContent = message;
          
          if (type === 'error') {
            alertTitle.classList.add('text-danger');
            alertTitle.classList.remove('text-success');
          } else {
            alertTitle.classList.add('text-success');
            alertTitle.classList.remove('text-danger');
          }
          
          modalInstance.show();
          
          if (resetFormOnClose) {
            document.getElementById('alertOkBtn').addEventListener('click', function onceHandler() {
              form.reset();
              form.classList.remove('was-validated');
              const inputs = form.querySelectorAll('input, select');
              inputs.forEach(input => {
                input.classList.remove('is-invalid');
                input.classList.remove('is-valid');
              });
              urlPreviewContainer.style.display = 'none';
              this.removeEventListener('click', onceHandler);
            });
          }
        }
        
        // Add input validation event listeners
        const inputs = form.querySelectorAll('input, select');
        inputs.forEach(input => {
          input.addEventListener('change', function() {
            if (this.checkValidity()) {
              this.classList.remove('is-invalid');
              this.classList.add('is-valid');
            } else {
              this.classList.remove('is-valid');
              this.classList.add('is-invalid');
            }
          });
        });
        
        // Load existing mappings
        async function loadMappings() {
          try {
            const response = await fetch(`${apiBaseUrl}/get_product_mappings.php`);
            const data = await response.json();
            
            const tableBody = document.getElementById('mappings-tbody');
            
            if (data.success && data.records && data.records.length > 0) {
              // Clear existing rows
              tableBody.innerHTML = '';
              
              // Add new rows
              data.records.forEach(mapping => {
                const platform = platformsData.find(p => p.platform_id == mapping.platform_id) || {};
                const product = productsData.find(p => p.product_id == mapping.product_id) || {};
                const fullUrl = platform.platform_url + platform.platform_url_price + mapping.platform_product_id;
                
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td>${product.product_name || 'Unknown'} - ${product.product_model || 'Unknown'}</td>
                  <td>${platform.platform_name || 'Unknown'}</td>
                  <td>${mapping.platform_product_id}</td>
                  <td><a href="${fullUrl}" target="_blank">${fullUrl}</a></td>
                  <td>
                    <button class="btn btn-sm btn-danger delete-mapping" data-id="${mapping.mapping_id}" 
                      data-product="${product.product_name || 'Unknown'}" 
                      data-platform="${platform.platform_name || 'Unknown'}">
                      <i class="bi bi-trash"></i> Delete
                    </button>
                  </td>
                `;
                tableBody.appendChild(row);
              });
              
              // Add delete event listeners
              document.querySelectorAll('.delete-mapping').forEach(btn => {
                btn.addEventListener('click', function() {
                  const mappingId = this.getAttribute('data-id');
                  const productName = this.getAttribute('data-product');
                  const platformName = this.getAttribute('data-platform');
                  
                  document.getElementById('delete-mapping-id').value = mappingId;
                  document.getElementById('delete-mapping-info').textContent = 
                    `Product: ${productName}, Platform: ${platformName}`;
                  
                  const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
                  deleteModal.show();
                });
              });
              
            } else {
              tableBody.innerHTML = '<tr><td colspan="5" class="text-center">No mappings found</td></tr>';
            }
          } catch (error) {
            console.error('Error loading mappings:', error);
            const tableBody = document.getElementById('mappings-tbody');
            tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading mappings</td></tr>';
          }
        }
        
        // Handle delete confirmation
        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
          const mappingId = document.getElementById('delete-mapping-id').value;
          
          if (!mappingId) return;
          
          try {
            const response = await fetch(`${apiBaseUrl}/delete_product_mapping.php`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ mapping_id: mappingId })
            });
            
            const result = await response.json();
            
            // Close the modal
            bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
            
            if (result.success) {
              showAlert('Success', 'Mapping deleted successfully!', 'success');
              // Reload mappings
              loadMappings();
            } else {
              showAlert('Error', result.message || 'Failed to delete mapping.', 'error');
            }
          } catch (error) {
            console.error('Error deleting mapping:', error);
            bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
            showAlert('Error', 'An error occurred while deleting the mapping.', 'error');
          }
        });
      });
    </script>
    <!--end::Script-->
  </body><!--end::Body-->
</html>