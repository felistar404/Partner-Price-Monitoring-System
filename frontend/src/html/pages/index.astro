---
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";

const title = "QNAP | Monitoring System";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index";

// fetch all price records from API
let records = [];
let latestUpdate = null;
try {
  const apiBaseUrl = import.meta.env.PUBLIC_API_BASE;
  const response = await fetch(`${apiBaseUrl}/get_price_records.php`);
  const data = await response.json();
  records = data.records || [];
  
  // Fetch the latest update date
  const latestDateResponse = await fetch(`${apiBaseUrl}/get_latest_date.php`);
  const latestDateData = await latestDateResponse.json();
  latestUpdate = latestDateData.latest_update;
} catch (error) {
  console.error("Error:", error);
}

// calculate total pages and set max elements per page for table
const itemsPerPage = 25;
const totalPages = Math.ceil(records.length / itemsPerPage);

const paginationArray = [];
for (let i = 1; i <= totalPages; i++) {
  paginationArray.push(i);
}
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />

    <!-- apexcharts -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.css"
      integrity="sha256-4MX+61mt9NVvvuPjUWdUdyfZfxSB1/Rf9WtqRHgG5S0="
      crossorigin="anonymous"
    />

    <!-- jsvectormap -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/jsvectormap@1.5.3/dist/css/jsvectormap.min.css"
      integrity="sha256-+uGLJmmTKOqBr+2E6KDYs/NRsHxSkONXFHUL0fy2O/4="
      crossorigin="anonymous"
    />
  </head>
  <!--end::Head-->
  <!--begin::Body-->
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">Price Records</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">Home</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Price_records
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content Header-->
        <!--begin::App Content-->
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Card-->
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title mb-0">Monitoring Data</h3>
                <div class="ms-auto">
                  <div class="d-flex align-items-center">
                    {latestUpdate && (
                      <div class="text-muted me-3">
                        <small>Last updated: {new Date(latestUpdate).toLocaleString()}</small>
                      </div>
                    )}
                    <div class="btn-group">
                      <button id="export-btn" class="btn btn-sm btn-outline-success" title="Export to Excel">
                        <i class="bi bi-download"></i> Export
                      </button>
                      <button id="refresh-btn" class="btn btn-sm btn-outline-primary" title="Refresh data">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-bordered table-striped" id="records-table">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Product Name</th>
                        <th>Product Model</th>
                        <th>Merchant</th>
                        <th>Platform</th>
                        <th>Price</th>
                        <th>Latest Update</th>
                        <th>Price Status</th>
                      </tr>
                    </thead>
                    <tbody>
                      {records.length > 0 ? (
                        records.map((record: { record_id: unknown; product_name: unknown; 
                          product_model: unknown; merchant_name: unknown; platform_name: unknown;
                           price: unknown; currency: unknown; latest_update: any; price_status: string;
                           }, index: number) => (
                          <tr class="table-row" data-page={Math.floor(index / itemsPerPage) + 1}>
                            <td>{index + 1}</td>
                            <td>{record.product_name}</td>
                            <td>{record.product_model}</td>
                            <td>{record.merchant_name}</td>
                            <td>{record.platform_name}</td>
                            <td>{record.price} {record.currency}</td>
                            <td>{record.latest_update ? record.latest_update.split(' ')[0] : 'N/A'}</td>
                            <td>
                              {record.price_status === 'missing' && (
                                <span class="badge bg-info">Missing</span>
                              )}
                              {record.price_status === 'acceptable' && (
                                <span class="badge bg-success">Acceptable</span>
                              )}
                              {record.price_status === 'overpriced' && (
                                <span class="badge bg-danger">Overpriced</span>
                              )}
                              {record.price_status === 'underpriced' && (
                                <span class="badge bg-warning">Underpriced</span>
                              )}
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colspan="9" class="text-center">No records found</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
              <div class="card-footer">
                <nav aria-label="Page navigation">
                  <ul class="pagination justify-content-center" id="pagination">
                    <li class="page-item page-prev disabled">
                      <a class="page-link" href="#" tabindex="-1">Previous</a>
                    </li>
                    {paginationArray.map(pageNum => (
                      <li class={`page-item page-number ${pageNum === 1 ? 'active' : ''}`} data-page={pageNum}>
                        <a class="page-link" href="#">{pageNum}</a>
                      </li>
                    ))}
                    <li class={`page-item page-next ${totalPages <= 1 ? 'disabled' : ''}`}>
                      <a class="page-link" href="#">Next</a>
                    </li>
                  </ul>
                </nav>
              </div>
            </div>
            <!--end::Card-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content-->
      </main>
      <!--end::App Main-->
      <Footer />
    </div>
    <!--end::App Wrapper-->
    <!--begin::Script-->
    <Scripts path={path} />

    <!-- OPTIONAL SCRIPTS -->

    <!-- sortablejs -->
    <script
      src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"
      integrity="sha256-ipiJrswvAR4VAx/th+6zWsdeYmVae0iJuiR+6OqHJHQ="
      crossorigin="anonymous"></script>

    <!-- sortablejs -->
    <script is:inline>
      const connectedSortables =
        document.querySelectorAll(".connectedSortable");
      connectedSortables.forEach((connectedSortable) => {
        let sortable = new Sortable(connectedSortable, {
          group: "shared",
          handle: ".card-header",
        });
      });

      const cardHeaders = document.querySelectorAll(
        ".connectedSortable .card-header",
      );
      cardHeaders.forEach((cardHeader) => {
        cardHeader.style.cursor = "move";
      });
    </script>

    <!-- apexcharts -->
    <script
      src="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.min.js"
      integrity="sha256-+vh8GkaU7C9/wbSLIcwq82tQ2wTf44aOHA8HlBMwRI8="
      crossorigin="anonymous"></script>

    <!-- jsvectormap -->
    <script
      src="https://cdn.jsdelivr.net/npm/jsvectormap@1.5.3/dist/js/jsvectormap.min.js"
      integrity="sha256-/t1nN2956BT869E6H4V1dnt0X5pAQHPytli+1nTZm2Y="
      crossorigin="anonymous"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/jsvectormap@1.5.3/dist/maps/world.js"
      integrity="sha256-XPpPaZlU8S/HWf7FZLAncLg2SAkP8ScUTII89x9D3lY="
      crossorigin="anonymous"></script>

    <!-- This is client-side pagination script -->
    <script is:inline define:vars={{ totalPages }}>
      document.addEventListener('DOMContentLoaded', function() {
        let currentPage = 1;
        const itemsPerPage = 25;

        function showPage(page) {
          document.querySelectorAll('#records-table .table-row').forEach(row => {
            row.style.display = 'none';
          });

          document.querySelectorAll(`#records-table .table-row[data-page="${page}"]`).forEach(row => {
            row.style.display = '';
          });

          document.querySelectorAll('#pagination .page-number').forEach(item => {
            item.classList.remove('active');
          });
          document.querySelector(`#pagination .page-number[data-page="${page}"]`)?.classList.add('active');
          document.querySelector('.page-prev').classList.toggle('disabled', page === 1);
          document.querySelector('.page-next').classList.toggle('disabled', page === totalPages);
          
          currentPage = page;
        }

        // Show first page at first glance
        showPage(1);

        document.querySelectorAll('#pagination .page-number').forEach(item => {
          item.addEventListener('click', function(e) {
            e.preventDefault();
            const page = parseInt(this.getAttribute('data-page'));
            showPage(page);
          });
        });

        document.querySelector('.page-prev').addEventListener('click', function(e) {
          e.preventDefault();
          if (currentPage > 1) {
            showPage(currentPage - 1);
          }
        });

        document.querySelector('.page-next').addEventListener('click', function(e) {
          e.preventDefault();
          if (currentPage < totalPages) {
            showPage(currentPage + 1);
          }
        });
      });
    </script>
    <!--end::Script-->

    <div class="modal fade" id="processingModal" tabindex="-1" aria-labelledby="processingModalLabel" data-bs-backdrop="static" data-bs-keyboard="false">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="processingModalLabel">Data fetching in Progress</h5>
          </div>
          <div class="modal-body text-center">
            <div class="spinner-border text-primary mb-3" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div id="processingStatus">Refreshing data, please wait...</div>
            <div class="progress mt-3">
              <div id="processingProgress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script is:inline>
      document.addEventListener('DOMContentLoaded', function() {
        const refreshBtn = document.getElementById('refresh-btn');
        refreshBtn.addEventListener('click', async function() {
          refreshBtn.disabled = true;
          refreshBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Refreshing...';

          const processingModal = new bootstrap.Modal(document.getElementById('processingModal'));
          processingModal.show();

          const statusElement = document.getElementById('processingStatus');
          const progressBar = document.getElementById('processingProgress');

          try {
            // After successful refresh, reload the page to get updated data
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } catch (error) {
            console.error('Error refreshing data:', error);
            refreshBtn.disabled = false;
            refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Refresh';
            processingModal.hide();
          }
        });
      });
    </script>
  </body><!--end::Body-->
</html>
