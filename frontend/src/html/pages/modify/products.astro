---
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";

const title = "QNAP | Monitoring System";
const path = "../../../dist";
const mainPage = "dashboard";
const page = "modify-products";

// fetch all products from API
let products = [];
try {
  const apiBaseUrl = import.meta.env.PUBLIC_API_BASE;
  const response = await fetch(`${apiBaseUrl}/get_products.php`);
  const data = await response.json();
  products = data.records || [];
} catch (error) {
  console.error("Error:", error);
}

// calculate total pages and set max elements per page for table
const itemsPerPage = 10;
const totalPages = Math.ceil(products.length / itemsPerPage);

const paginationArray = [];
for (let i = 1; i <= totalPages; i++) {
  paginationArray.push(i);
}

// Extract API base URL to pass to client script
const apiBaseUrl = import.meta.env.PUBLIC_API_BASE;
---

<!doctype html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />
  </head>
  <!--end::Head-->
  <!--begin::Body-->
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">Modify Products</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">Home</a></li>
                  <li class="breadcrumb-item">Modify Items</li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Products
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content Header-->
        <!--begin::App Content-->
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Card-->
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title mb-0">Products List</h3>
                <div class="ms-auto">
                  <div class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" id="product-search" class="form-control" placeholder="Search products...">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                  </div>
                </div>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-bordered table-striped" id="products-table">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Product Name</th>
                        <th>Model</th>
                        <th>Reference Price</th>
                        <th>Min Price</th>
                        <th>Max Price</th>
                        <th>Status</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody>
                      {products.length > 0 ? (
                        products.map((product: any, index: number) => (
                          <tr class="table-row" data-page={Math.floor(index / itemsPerPage) + 1} data-product={JSON.stringify(product)}>
                            <td>{product.product_id}</td>
                            <td>{product.product_name}</td>
                            <td>{product.product_model}</td>
                            <td>{product.reference_price}</td>
                            <td>{product.min_acceptable_price}</td>
                            <td>{product.max_acceptable_price}</td>
                            <td>
                              <span class={`badge ${product.product_status === 'active' ? 'bg-success' : 'bg-danger'}`}>
                                {product.product_status}
                              </span>
                            </td>
                            <td>
                              <button class="btn btn-primary btn-sm edit-btn" data-product-id={product.product_id}>
                                <i class="bi bi-pencil-square"></i> Edit
                              </button>
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colspan="8" class="text-center">No products found</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
              <div class="card-footer">
                <nav aria-label="Page navigation">
                  <ul class="pagination justify-content-center" id="pagination">
                    <li class="page-item page-prev disabled">
                      <a class="page-link" href="#" tabindex="-1">Previous</a>
                    </li>
                    {paginationArray.map(pageNum => (
                      <li class={`page-item page-number ${pageNum === 1 ? 'active' : ''}`} data-page={pageNum}>
                        <a class="page-link" href="#">{pageNum}</a>
                      </li>
                    ))}
                    <li class={`page-item page-next ${totalPages <= 1 ? 'disabled' : ''}`}>
                      <a class="page-link" href="#">Next</a>
                    </li>
                  </ul>
                </nav>
              </div>
            </div>
            <!--end::Card-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content-->
      </main>
      <!--end::App Main-->
      <Footer />
    </div>
    <!--end::App Wrapper-->
    
    <!-- Edit Product Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="editProductForm">
              <input type="hidden" id="product_id" name="product_id">
              
              <div class="row mb-3">
                <div class="col-md-6">
                  <label for="product_name" class="form-label">Product Name</label>
                  <input type="text" class="form-control" id="product_name" name="product_name" required>
                </div>
                <div class="col-md-6">
                  <label for="product_model" class="form-label">Product Model</label>
                  <input type="text" class="form-control" id="product_model" name="product_model" required>
                </div>
              </div>
              
              <div class="row mb-3">
                <div class="col-md-4">
                  <label for="reference_price" class="form-label">Reference Price</label>
                  <input type="number" class="form-control" id="reference_price" name="reference_price" step="0.01" required>
                </div>
                <div class="col-md-4">
                  <label for="min_acceptable_price" class="form-label">Min Acceptable Price</label>
                  <input type="number" class="form-control" id="min_acceptable_price" name="min_acceptable_price" step="0.01" required>
                </div>
                <div class="col-md-4">
                  <label for="max_acceptable_price" class="form-label">Max Acceptable Price</label>
                  <input type="number" class="form-control" id="max_acceptable_price" name="max_acceptable_price" step="0.01" required>
                </div>
              </div>
              
              <div class="row mb-3">
                <div class="col-md-6">
                  <label for="product_status" class="form-label">Status</label>
                  <select class="form-select" id="product_status" name="product_status" required>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                  </select>
                </div>
              </div>
              
              <div class="mb-3">
                <label for="product_description" class="form-label">Description</label>
                <textarea class="form-control" id="product_description" name="product_description" rows="3"></textarea>
              </div>
              
              <div class="row">
                <div class="col-md-6">
                  <p class="text-muted mb-0">Created: <span id="created_at"></span></p>
                </div>
                <div class="col-md-6">
                  <p class="text-muted mb-0">Last Updated: <span id="updated_at"></span></p>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="saveProductBtn">Save Changes</button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Success Alert Modal -->
    <div class="modal fade" id="alertModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="alertTitle">Success</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div id="alertMessage">Product updated successfully!</div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
          </div>
        </div>
      </div>
    </div>
    
    <!--begin::Script-->
    <Scripts path={path} />

    <script is:inline define:vars={{ totalPages, itemsPerPage, apiBaseUrl }}>
      document.addEventListener('DOMContentLoaded', function() {
        let currentPage = 1;
        // Use the server-side variable passed to the client
        // const apiBaseUrl = import.meta.env.PUBLIC_API_BASE; // REMOVE THIS LINE
        
        // Pagination functionality
        function showPage(page) {
          document.querySelectorAll('#products-table .table-row').forEach(row => {
            row.style.display = 'none';
          });

          document.querySelectorAll(`#products-table .table-row[data-page="${page}"]`).forEach(row => {
            row.style.display = '';
          });

          document.querySelectorAll('#pagination .page-number').forEach(item => {
            item.classList.remove('active');
          });
          document.querySelector(`#pagination .page-number[data-page="${page}"]`)?.classList.add('active');
          document.querySelector('.page-prev').classList.toggle('disabled', page === 1);
          document.querySelector('.page-next').classList.toggle('disabled', page === totalPages);
          
          currentPage = page;
        }

        // Show first page at first glance
        showPage(1);

        document.querySelectorAll('#pagination .page-number').forEach(item => {
          item.addEventListener('click', function(e) {
            e.preventDefault();
            const page = parseInt(this.getAttribute('data-page'));
            showPage(page);
          });
        });

        document.querySelector('.page-prev')?.addEventListener('click', function(e) {
          e.preventDefault();
          if (currentPage > 1) {
            showPage(currentPage - 1);
          }
        });

        document.querySelector('.page-next')?.addEventListener('click', function(e) {
          e.preventDefault();
          if (currentPage < totalPages) {
            showPage(currentPage + 1);
          }
        });
        
        // product search functionality
        const productSearch = document.getElementById('product-search');
        productSearch?.addEventListener('input', function() {
          const searchText = this.value.toLowerCase();
          let visibleItems = 0;
          
          document.querySelectorAll('#products-table .table-row').forEach(row => {
            const productName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
            const productModel = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
            
            if (productName.includes(searchText) || productModel.includes(searchText)) {
              row.style.display = '';
              visibleItems++;
            } else {
              row.style.display = 'none';
            }
          });
          
          // show "no results" message if no data in db
          if (visibleItems === 0) {
            const noResultsRow = document.createElement('tr');
            noResultsRow.id = 'no-results-row';
            noResultsRow.innerHTML = '<td colspan="8" class="text-center">No matching products found</td>';
            
            const existingNoResults = document.getElementById('no-results-row');
            if (!existingNoResults) {
              document.querySelector('#products-table tbody').appendChild(noResultsRow);
            }
          } else {
            const existingNoResults = document.getElementById('no-results-row');
            if (existingNoResults) {
              existingNoResults.remove();
            }
          }
        });

        // edit button click handler
        document.querySelectorAll('.edit-btn').forEach(button => {
          button.addEventListener('click', function() {
            const productRow = this.closest('tr');
            const productData = JSON.parse(productRow.dataset.product);
            
            // fill the form initially
            document.getElementById('product_id').value = productData.product_id;
            document.getElementById('product_name').value = productData.product_name;
            document.getElementById('product_model').value = productData.product_model;
            document.getElementById('reference_price').value = productData.reference_price;
            document.getElementById('min_acceptable_price').value = productData.min_acceptable_price;
            document.getElementById('max_acceptable_price').value = productData.max_acceptable_price;
            document.getElementById('product_status').value = productData.product_status;
            document.getElementById('product_description').value = productData.product_description;
            document.getElementById('created_at').textContent = productData.created_at;
            document.getElementById('updated_at').textContent = productData.updated_at;
            
            // show the modal (form in popup)
            const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
            editModal.show();
          });
        });
        
        // save button click handler
        document.getElementById('saveProductBtn')?.addEventListener('click', async function() {
          const form = document.getElementById('editProductForm');
          
          // Basic form validation
          if (!form.checkValidity()) {
            form.reportValidity();
            return;
          }
          
          // get form data
          const formData = {
            product_id: document.getElementById('product_id').value,
            product_name: document.getElementById('product_name').value,
            product_model: document.getElementById('product_model').value,
            reference_price: document.getElementById('reference_price').value,
            min_acceptable_price: document.getElementById('min_acceptable_price').value,
            max_acceptable_price: document.getElementById('max_acceptable_price').value,
            product_status: document.getElementById('product_status').value,
            product_description: document.getElementById('product_description').value
          };
          
          try {
            // show loading state & send request to backend
            const saveBtn = document.getElementById('saveProductBtn');
            const originalBtnText = saveBtn.innerHTML;
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
            const response = await fetch(`${apiBaseUrl}/update_product.php`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            // reset button state to normal & close the modal
            saveBtn.disabled = false;
            saveBtn.innerHTML = originalBtnText;
            bootstrap.Modal.getInstance(document.getElementById('editProductModal')).hide();
            
            // show success message to user
            const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
            if (result.success) {
              document.getElementById('alertTitle').textContent = 'Success';
              document.getElementById('alertMessage').textContent = 'Product updated successfully!';
              
              // update the table with new data
              const updatedRow = document.querySelector(`tr .edit-btn[data-product-id="${formData.product_id}"]`).closest('tr');
              if (updatedRow) {
                const cells = updatedRow.querySelectorAll('td');
                cells[1].textContent = formData.product_name;
                cells[2].textContent = formData.product_model;
                cells[3].textContent = formData.reference_price;
                cells[4].textContent = formData.min_acceptable_price;
                cells[5].textContent = formData.max_acceptable_price;
                cells[6].innerHTML = `<span class="badge ${formData.product_status === 'active' ? 'bg-success' : 'bg-danger'}">${formData.product_status}</span>`;
                const productData = JSON.parse(updatedRow.dataset.product);
                productData.product_name = formData.product_name;
                productData.product_model = formData.product_model;
                productData.reference_price = formData.reference_price;
                productData.min_acceptable_price = formData.min_acceptable_price;
                productData.max_acceptable_price = formData.max_acceptable_price;
                productData.product_status = formData.product_status;
                productData.product_description = formData.product_description;
                productData.updated_at = new Date().toISOString().replace('T', ' ').substr(0, 19); // set current time as updated time
                updatedRow.dataset.product = JSON.stringify(productData);
              }
            } else {
              document.getElementById('alertTitle').textContent = 'Error';
              document.getElementById('alertMessage').textContent = result.message || 'Failed to update product. Please try again.';
            }
            alertModal.show();
          } catch (error) {
            console.error('Error updating product:', error);
            
            // show error message to user
            const alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
            document.getElementById('alertTitle').textContent = 'Error';
            document.getElementById('alertMessage').textContent = 'An error occurred while updating the product. Please try again.';
            alertModal.show();
            
            // reset button state to normal
            document.getElementById('saveProductBtn').disabled = false;
            document.getElementById('saveProductBtn').innerHTML = originalBtnText;
          }
        });
      });
    </script>
    <!--end::Script-->
  </body><!--end::Body-->
</html>
